setwd("folder1/foler2/final_folder") # Change that. Copy&Past your directory path, for example ""
library(tidyverse) # loads the whole tidyverse, including dplyr, readr, ggplot, etc
library(data.table) # loads the data.table package, in case you use the fread()
install.packages("data.table")
# r-script files ()endlng with .r). R-Notebooks ()ending with .rmd) by default take
setwd("/Users/roman/OneDrive - Aalborg Universitet/DataScienceSemester/2018/M1-2018/assignments/assignment_1/data/")
rm(list=ls())
library(tidyverse) # loads the whole tidyverse, including dplyr, readr, ggplot, etc
library(data.table)
cities_df <- fread("cities_df.tsv", header = TRUE, check.names = TRUE, data.table = FALSE)
trips_df <- fread("trips_df.tsv", header = TRUE, check.names = TRUE, data.table = FALSE)
head(cities_df)
head(trips_df)
colnames(trips_df) <- tolower(colnames(trips_df))
colnames(cities_df) <- tolower(colnames(cities_df))
cities_df <- cities_df[,!duplicated(colnames(cities_df))]
glimpse(cities_df)
cities_df <- cities_df %>%
select(place_slug, walkability, startup.score, quality.of.life, fun)
glimpse(cities_df)
# First, check what are the different values "fun" can take.
unique(cities_df$fun)
cities_df <- cities_df %>%
mutate(fun = recode(fun, bad = 1, okay = 2, good = 3, great = 4))
cities_df <- cities_df %>%
mutate(startup.score = recode(startup.score, bad = 1, okay = 2, good = 3, great = 4),
walkability = recode(walkability, bad = 1, okay = 2, good = 3, great = 4),
quality.of.life = recode(quality.of.life, bad = 1, okay = 2, good = 3, great = 4))
cities_df <- cities_df %>%
drop_na()
# Further, we drop cities that appear twice. Argument ".keep_all = TRUE" means that we do not want to discard the rest of the variables
cities_df <- cities_df %>%
distinct(place_slug, .keep_all = TRUE)
rownames(cities_df) <- cities_df[,"place_slug"]
# The argument "centers = 3" specifies how many clusters we would like to have
?kmeans
km.cities <- kmeans(cities_df %>% select(-place_slug), centers = 3)
library(factoextra)
fviz_cluster(km.cities, data = cities_df %>% select(-place_slug),
ggtheme = theme_gray())
install.packages("factoextra")
library(factoextra)
fviz_cluster(km.cities, data = cities_df %>% select(-place_slug),
ggtheme = theme_gray())
# Clustering does not change the order, so we can just bint it.
cities_df <- cities_df %>%
bind_cols(cluster = km.cities$cluster)
# We know that the variable "place_slug" appears in bost dataframes, so can be used as ID for a merge
trips_df <- trips_df %>%
left_join(cities_df %>% select(place_slug, cluster), by = "place_slug")
# Now, lets see how many people visited the different clusters overall
trips_df %>%
group_by(cluster) %>%
count()
### set working directory
# This will set your working rirectory to the place where the scipt is. Note: Only relevant for
# r-script files ()endlng with .r). R-Notebooks ()ending with .rmd) by default take
setwd("/Users/roman/OneDrive - Aalborg Universitet/DataScienceSemester/2018/M1-2018/assignments/assignment_1/data/") # Change that. Copy&Past your directory path, for example ""
### Cleaning the workspace, meaning deleting all previously loaded data (optimal step)
rm(list=ls())
### Installing packages: If you did not install the packages, uncomment (remove the leading #) the following lines and run
# install.packages("tidyverse")
# install.packages("data.table")
### Loading packages
library(tidyverse) # loads the whole tidyverse, including dplyr, readr, ggplot, etc
library(data.table) # loads the data.table package, in case you use the fread()
### Loading data
# Necessary: the datafiles you find in the assignment folder have to be placed in the same folder as this script file.
# Best thing to do: fread() from data.table
# header = TRUE tells fread that the first row should be interpreted as variable-name
# data.table = TRUE tells fread that it should not create a data.table (its own data format), but a dataframe instead
# check.names = TRUE will replace space in Variable names with . (because R doesnt like that)
cities_df <- fread("cities_df.tsv", header = TRUE, check.names = TRUE, data.table = FALSE)
trips_df <- fread("trips_df.tsv", header = TRUE, check.names = TRUE, data.table = FALSE)
### Inspect the data
# how dies the data look like? head() prints the first rows
head(cities_df)
head(trips_df)
# variable names are a mix of capital letters, and small letters. Lets make them all small.
colnames(trips_df) <- tolower(colnames(trips_df))
colnames(cities_df) <- tolower(colnames(cities_df))
# Further, we see that for some reasons some variable names (eg., country) appear more than once
# Let's throw them out
cities_df <- cities_df[,!duplicated(colnames(cities_df))]
### Lets only look at cities:
glimpse(cities_df)
# Lets select just some variables to look closer
cities_df <- cities_df %>%
select(place_slug, walkability, startup.score, quality.of.life, fun)
glimpse(cities_df)
# Lets recode the characters into numeric. Lets only do it for "fun"
# First, check what are the different values "fun" can take.
unique(cities_df$fun)
# That we could recode into numeric.
# Dont worry about the warning. Only states that the not mentioned values (here, an empty string "") will be replaced by NA
cities_df <- cities_df %>%
mutate(fun = recode(fun, bad = 1, okay = 2, good = 3, great = 4))
# We also could do that for all other variables.
# Since they are coded in the same way (bad, okay, good, great), so we can use the same code, only change the variable name
cities_df <- cities_df %>%
mutate(startup.score = recode(startup.score, bad = 1, okay = 2, good = 3, great = 4),
walkability = recode(walkability, bad = 1, okay = 2, good = 3, great = 4),
quality.of.life = recode(quality.of.life, bad = 1, okay = 2, good = 3, great = 4))
View(cities_df)
